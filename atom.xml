<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pcd&#39;s Blog</title>
  
  <subtitle>keep the original faith</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-21T13:06:16.632Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>大人物</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最近做的五道链表算法题总结</title>
    <link href="http://yoursite.com/2021/01/20/%E6%9C%80%E8%BF%91%E5%81%9A%E7%9A%84%E4%BA%94%E9%81%93%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2021/01/20/%E6%9C%80%E8%BF%91%E5%81%9A%E7%9A%84%E4%BA%94%E9%81%93%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-20T13:41:18.196Z</published>
    <updated>2021-01-21T13:06:16.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近做的五道链表算法题总结"><a href="#最近做的五道链表算法题总结" class="headerlink" title="最近做的五道链表算法题总结"></a>最近做的五道链表算法题总结</h1><h2 id="快慢链表"><a href="#快慢链表" class="headerlink" title="快慢链表"></a>快慢链表</h2><blockquote><p><strong>快慢链表</strong>就是链表设置两个快慢指针,<strong>一个慢指针****</strong>一个快指针****。快指针走的步数是慢指针步数的二倍。</p></blockquote><p>快慢指针可以解决的问题:</p><ol><li>判断链表是否有环</li><li>链表的入环</li><li>链表中点</li></ol><h3 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h3><p>如果链表有环则快慢指针一定会相遇,且一定在环上.</p><p><img src="https://raw.githubusercontent.com/1122pcd1122/My-picture/master/img/image-20210120203824419.png" alt="判断快慢链表是否有环"></p><p>根据图片假设有环且环的入口在第三个节点处,现在来推断论证他们相遇的位置</p><p>假设快指针每次走两个节点,慢指针每次走一个节点。则有一下步骤</p><p>慢指针 第二个节点(A)    快指针 第三个节点(AB)</p><p>慢指针 第三个节点(AB)    快指针 第三个节点(ABCD)</p><p>通过上述步骤看出,快慢指针相遇,因为快指针走的比慢指针快一倍,所以提前进入环,当慢指针进入环后,由于速度快最终追上慢指针.</p><p>所以只要找到快慢指针的相遇点就可以断定该链表有环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ListNode fast = head;</span><br><span class="line">ListNode slow = head;</span><br><span class="line"><span class="keyword">while</span>(fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    <span class="keyword">if</span>(fast == slow)&#123;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="判断入环位置"><a href="#判断入环位置" class="headerlink" title="判断入环位置"></a>判断入环位置</h3><p>通过上述相遇路径我们可以计算出快指针走过的长度,慢指针走过的长度</p><p>快指针: A+B+C+D</p><p>慢指针:A+B</p><p>根据快指针移动速度是慢指针的二倍</p><p>2(A+B)=A+B+C+D</p><p>A+B+A+B = A+B+C+D</p><p>A+B=C+D</p><p>根据算术过程可以分析出:<strong>慢指针从头节点开始走,快指针速度减半后从相遇位置开始走,二者相遇位置就是入环位置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ListNode fast = head;</span><br><span class="line">ListNode slow = head;</span><br><span class="line"><span class="keyword">boolean</span> isRing = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    <span class="keyword">if</span>(fast == slow)&#123;</span><br><span class="line">        isRing = <span class="keyword">true</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">slow = head;</span><br><span class="line"> <span class="keyword">if</span> (hasCycle)&#123;</span><br><span class="line">     ListNode node = head;</span><br><span class="line">     <span class="keyword">while</span> (node != slow)&#123;</span><br><span class="line">          node = node.next;</span><br><span class="line">          slow = slow.next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> slow;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="链表中点"><a href="#链表中点" class="headerlink" title="链表中点"></a>链表中点</h3><p>如果链表节点是偶数个,则指向中间两个元素的左边那个</p><p>如果链表节点是奇数个,则指向中间元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">ListNode(<span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode node = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode node1 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode node2 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        ListNode node3 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        head.next = node;</span><br><span class="line">        node.next = nede1;</span><br><span class="line">        node1.next = node2;</span><br><span class="line">        node2.next = node3;</span><br><span class="line">     Main main = <span class="keyword">new</span> Main();</span><br><span class="line">        ListNode theNode = main.findNode(head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">findNode</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最近做的五道链表算法题总结&quot;&gt;&lt;a href=&quot;#最近做的五道链表算法题总结&quot; class=&quot;headerlink&quot; title=&quot;最近做的五道链表算法题总结&quot;&gt;&lt;/a&gt;最近做的五道链表算法题总结&lt;/h1&gt;&lt;h2 id=&quot;快慢链表&quot;&gt;&lt;a href=&quot;#快慢链表&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python3操作MYSQL</title>
    <link href="http://yoursite.com/2021/01/17/Python3%E6%93%8D%E4%BD%9CMYSQL/"/>
    <id>http://yoursite.com/2021/01/17/Python3%E6%93%8D%E4%BD%9CMYSQL/</id>
    <published>2021-01-17T15:08:06.217Z</published>
    <updated>2021-01-18T08:49:56.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python3操作MYSQL"><a href="#Python3操作MYSQL" class="headerlink" title="Python3操作MYSQL"></a>Python3操作MYSQL</h1><h2 id="PyMySQL安装"><a href="#PyMySQL安装" class="headerlink" title="PyMySQL安装"></a>PyMySQL安装</h2><blockquote><p>PyMySQL 是在 Python3.x 版本中用于连接 MySQL 服务器的一个库</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure><h2 id="mysql连接"><a href="#mysql连接" class="headerlink" title="mysql连接"></a>mysql连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">connection = pymysql.connect(host=<span class="string">'localhost'</span>, </span><br><span class="line">                             port=<span class="number">3306</span>,</span><br><span class="line">                             user=<span class="string">'root'</span>,</span><br><span class="line">                             password=<span class="string">'peichendong17'</span>,</span><br><span class="line">                             database=<span class="string">'test'</span>,</span><br><span class="line">                             charset=<span class="string">'utf8'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">host</td><td align="center">数据库服务地址,默认localhost</td></tr><tr><td align="center">user</td><td align="center">用户名,默认为当前程序运行用户</td></tr><tr><td align="center">password</td><td align="center">登录密码,默认为空字符串</td></tr><tr><td align="center">port</td><td align="center">数据库端口,默认为3306</td></tr><tr><td align="center">database</td><td align="center">数据库名</td></tr><tr><td align="center">cursorclass</td><td align="center">设置默认的游标类型</td></tr><tr><td align="center">read_timeout</td><td align="center">读取数据超时时间,单位秒,默认无限制</td></tr><tr><td align="center">write_timeout</td><td align="center">写入数据超时时间,单位秒,默认无限制</td></tr><tr><td align="center">charset</td><td align="center">数据库编码</td></tr><tr><td align="center">init_command</td><td align="center">当连接建立完成之后执行的初始化SQL语句</td></tr><tr><td align="center">connection_timeout</td><td align="center">连接超时时间,默认10,最小1,最大3153600</td></tr><tr><td align="center">autocommit</td><td align="center">是否自动提交,默认不自动提交,参数值为None表示以服务器为准</td></tr><tr><td align="center">max_allowed_packet</td><td align="center">发送给服务器的最大数据量,默认为16MB</td></tr><tr><td align="center">defer_connect</td><td align="center">是否惰性连接,默认为立即连接</td></tr><tr><td align="center">db</td><td align="center">已弃用的数据库别名</td></tr><tr><td align="center">passwd</td><td align="center">已弃用的数据库密码别名</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="执行SQL"><a href="#执行SQL" class="headerlink" title="执行SQL"></a>执行SQL</h2><ul><li><p>cursor.execute(sql,args)执行单条SQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取游标</span></span><br><span class="line">cursor = connection.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据表</span></span><br><span class="line">effect_row = cursor.execute(<span class="string">'''</span></span><br><span class="line"><span class="string">CREATE TABLE `users` (</span></span><br><span class="line"><span class="string">  `name` varchar(32) NOT NULL,</span></span><br><span class="line"><span class="string">  `age` int(10) unsigned NOT NULL DEFAULT '0',</span></span><br><span class="line"><span class="string">  PRIMARY KEY (`name`)</span></span><br><span class="line"><span class="string">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据(元组或列表)</span></span><br><span class="line">effect_row2 = cursor.execute(<span class="string">'INSERT INTO `users` (`name`, `age`) VALUES (%s, %s)'</span>, (<span class="string">'mary'</span>, <span class="number">18</span>))</span><br><span class="line"></span><br><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'20'</span>, <span class="string">'age'</span>: <span class="string">'18'</span>&#125;</span><br><span class="line">effect_row3 = cursor.execute(<span class="string">'INSERT INTO users (name, age) VALUES (%(name)s, %(age)s)'</span>, info)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>executemany(sql,args)批量执行SQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批量插入</span></span><br><span class="line">effect_row = cursor.executemany(</span><br><span class="line">    <span class="string">'INSERT INTO `users` (`name`, `age`) VALUES (%s, %s) ON DUPLICATE KEY UPDATE age=VALUES(age)'</span>, [</span><br><span class="line">        (<span class="string">'hello'</span>, <span class="number">13</span>),</span><br><span class="line">        (<span class="string">'fake'</span>, <span class="number">28</span>),</span><br><span class="line">    ])</span><br><span class="line">connection.commit()</span><br></pre></td></tr></table></figure><p>注意:INSERT,UPDATE,DELETE等修改数据的语句需手动执行connection.commit()完成对数据修改的提交</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  cursor.execute(<span class="string">'SELECT * FROM users'</span>)</span><br><span class="line">  <span class="comment"># # 当前位置是指游标当前所指的位置后移动一位</span></span><br><span class="line">  <span class="comment"># cursor.scroll(1, mode='relative')  # 相对当前位置移动</span></span><br><span class="line">  <span class="comment"># # 绝对位置是游标移动到参数中设置的位置</span></span><br><span class="line">  <span class="comment"># cursor.scroll(2, mode='absolute')  # 相对绝对位置移动</span></span><br><span class="line">  <span class="comment"># 单条数据</span></span><br><span class="line">  print(<span class="string">'返回游标所指的下一行数据:'</span>, cursor.fetchone())</span><br><span class="line">  <span class="comment"># 获取前N条数据</span></span><br><span class="line">  print(<span class="string">'游标所指位置的下两行数据:'</span>, cursor.fetchmany(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 获取所有数据</span></span><br><span class="line">  print(<span class="string">'游标所指位置的剩余所有数据:'</span>, cursor.fetchall())</span><br><span class="line">  <span class="comment"># 上述三条每执行一次,会使游标向后移动</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="游标控制"><a href="#游标控制" class="headerlink" title="游标控制"></a>游标控制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前位置是指游标当前所指的位置后移动一位</span></span><br><span class="line">cursor.scroll(<span class="number">1</span>, mode=<span class="string">'relative'</span>)  <span class="comment"># 相对当前位置移动</span></span><br><span class="line"><span class="comment"># 绝对位置是游标移动到参数中设置的位置</span></span><br><span class="line">cursor.scroll(<span class="number">2</span>, mode=<span class="string">'absolute'</span>)  <span class="comment"># 相对绝对位置移动</span></span><br></pre></td></tr></table></figure><h2 id="设置游标类型"><a href="#设置游标类型" class="headerlink" title="设置游标类型"></a>设置游标类型</h2><p>查询时,默认返回的数据类型时元组,可以自定义设置返回类型,支持5中游标类型:</p><ul><li><p>Cursor:默认,元组类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回一条数据: (<span class="string">'20'</span>, <span class="number">18</span>)</span><br><span class="line">返回两条数据: ((<span class="string">'fake'</span>, <span class="number">28</span>), (<span class="string">'hello'</span>, <span class="number">13</span>))</span><br><span class="line">返回所有数据 ((<span class="string">'mary'</span>, <span class="number">18</span>),)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>DictCursor:字典类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回游标所指的下一行数据: &#123;<span class="string">'name'</span>: <span class="string">'20'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;</span><br><span class="line">游标所指位置的下两行数据: [&#123;<span class="string">'name'</span>: <span class="string">'fake'</span>, <span class="string">'age'</span>: <span class="number">28</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'hello'</span>, <span class="string">'age'</span>: <span class="number">13</span>&#125;]</span><br><span class="line">游标所指位置的剩余所有数据: [&#123;<span class="string">'name'</span>: <span class="string">'mary'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>DictCursorMixin:支持自定义的游标类型,需自定义才可以使用</p></li><li><p>SSCursor:无缓冲元组类型</p></li><li><p>SSDictCursor:无缓冲字典类型</p></li></ul><p>无缓冲游标类型,适用于数据量很大 ,一次性返回太慢,或者服务端宽较小时.</p><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><ul><li>开启事务<code>connection.begin()</code></li><li>提交事务<code>connection.commit()</code></li><li>回滚事务<code>connection.rollback()</code></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://pymysql.readthedocs.io/en/latest/modules/index.html" target="_blank" rel="noopener">PyMySQL的API参考文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python3操作MYSQL&quot;&gt;&lt;a href=&quot;#Python3操作MYSQL&quot; class=&quot;headerlink&quot; title=&quot;Python3操作MYSQL&quot;&gt;&lt;/a&gt;Python3操作MYSQL&lt;/h1&gt;&lt;h2 id=&quot;PyMySQL安装&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>用户(用户名,账号,密码,性别,电话号码,邮箱)</title>
    <link href="http://yoursite.com/2020/11/17/%E7%94%A8%E6%88%B7(%E7%94%A8%E6%88%B7%E5%90%8D,%E8%B4%A6%E5%8F%B7,%E5%AF%86%E7%A0%81,%E6%80%A7%E5%88%AB,%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81,%E9%82%AE%E7%AE%B1)/"/>
    <id>http://yoursite.com/2020/11/17/%E7%94%A8%E6%88%B7(%E7%94%A8%E6%88%B7%E5%90%8D,%E8%B4%A6%E5%8F%B7,%E5%AF%86%E7%A0%81,%E6%80%A7%E5%88%AB,%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81,%E9%82%AE%E7%AE%B1)/</id>
    <published>2020-11-17T12:37:21.929Z</published>
    <updated>2020-11-17T13:51:38.130Z</updated>
    
    <content type="html"><![CDATA[<p>用户(用户名,账号,密码,性别,电话号码,邮箱)</p><p>权限(角色,权限名)</p><p>角色(角色账号,角色用户名,角色名字)</p><p>回帖(回帖人用户名,回帖人账号,帖子标题,作者账号,回帖内容)</p><p>帖子(标题,内容,用户名,作者账号,发帖时间,帖子版块)</p><p>版块(版块名,版块作者,版块作者账号,类别编号,帖子数量,版块标题)</p><p>类别(类别代号,类别名)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户(用户名,账号,密码,性别,电话号码,邮箱)&lt;/p&gt;
&lt;p&gt;权限(角色,权限名)&lt;/p&gt;
&lt;p&gt;角色(角色账号,角色用户名,角色名字)&lt;/p&gt;
&lt;p&gt;回帖(回帖人用户名,回帖人账号,帖子标题,作者账号,回帖内容)&lt;/p&gt;
&lt;p&gt;帖子(标题,内容,用户名,作者账号,发帖时
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机设计大赛点子</title>
    <link href="http://yoursite.com/2020/11/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B%E7%82%B9%E5%AD%90/"/>
    <id>http://yoursite.com/2020/11/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B%E7%82%B9%E5%AD%90/</id>
    <published>2020-11-17T09:28:03.451Z</published>
    <updated>2020-11-17T09:28:03.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机设计大赛点子"><a href="#计算机设计大赛点子" class="headerlink" title="计算机设计大赛点子"></a>计算机设计大赛点子</h1><ol><li>汽车损耗检测</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机设计大赛点子&quot;&gt;&lt;a href=&quot;#计算机设计大赛点子&quot; class=&quot;headerlink&quot; title=&quot;计算机设计大赛点子&quot;&gt;&lt;/a&gt;计算机设计大赛点子&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;汽车损耗检测&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅谈Android onSaceInstanceState()和onRestoreInstanceState()调用时机</title>
    <link href="http://yoursite.com/2020/10/29/%E6%B5%85%E8%B0%88Android%20onSaceInstanceState()%E5%92%8ConRestoreInstanceState()%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA/"/>
    <id>http://yoursite.com/2020/10/29/%E6%B5%85%E8%B0%88Android%20onSaceInstanceState()%E5%92%8ConRestoreInstanceState()%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA/</id>
    <published>2020-10-29T11:39:11.902Z</published>
    <updated>2020-10-29T11:43:52.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈Android-onSaceInstanceState-和onRestoreInstanceState-调用时机"><a href="#浅谈Android-onSaceInstanceState-和onRestoreInstanceState-调用时机" class="headerlink" title="浅谈Android onSaceInstanceState()和onRestoreInstanceState()调用时机"></a>浅谈Android onSaceInstanceState()和onRestoreInstanceState()调用时机</h1><blockquote><p>Android系统的回收机制会在<strong>未经用户主动操作的情况下销毁Activity</strong>,而为了避免系统回收activity导致数据丢失,Android为我们提供了onSaveInStaceState(Bundle outState)和onRestoreInstanceState(Bundle savedinstanceState)用户保存和恢复数据</p></blockquote><h2 id="onSaveInStaceState-Bundle-outState-在什么时机被调用"><a href="#onSaveInStaceState-Bundle-outState-在什么时机被调用" class="headerlink" title="onSaveInStaceState(Bundle outState)在什么时机被调用"></a>onSaveInStaceState(Bundle outState)在什么时机被调用</h2><p>当它离开栈顶时会被调用,此时activity没有被销毁可能会被销毁.</p><ol><li>当屏幕息掉,再打开时</li><li>用户按下home键时</li><li>屏幕方向切换时</li><li>从当前Activity开启一个新的Activity</li></ol><p>当前activity的声明周期不确定:</p><p><strong>onPause-&gt;onSaveInstanceState-&gt;onStop或者onPause-&gt;onStop-&gt;onSaveInstanceState</strong></p><h2 id="onRestoreInstanceState-在什么时机被调用"><a href="#onRestoreInstanceState-在什么时机被调用" class="headerlink" title="onRestoreInstanceState()在什么时机被调用"></a>onRestoreInstanceState()在什么时机被调用</h2><p>调用时机为确定Activity被系统销毁后再打开avtivity时被调用</p><ol><li>屏幕旋转时</li><li>系统因为资源有限杀死activity时</li></ol><p>当前activity的声明周期:</p><p><strong>onPause -&gt; onSaveInstanceState -&gt; onStop -&gt; onDestroy -&gt; onCreate -&gt; onStart -&gt; onRestoreInstanceState -&gt; onResume</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅谈Android-onSaceInstanceState-和onRestoreInstanceState-调用时机&quot;&gt;&lt;a href=&quot;#浅谈Android-onSaceInstanceState-和onRestoreInstanceState-调用时机&quot; cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>中缀表达式转后缀表达式并计算</title>
    <link href="http://yoursite.com/2020/10/09/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B9%B6%E8%AE%A1%E7%AE%97/"/>
    <id>http://yoursite.com/2020/10/09/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B9%B6%E8%AE%A1%E7%AE%97/</id>
    <published>2020-10-09T12:13:07.436Z</published>
    <updated>2020-10-11T07:11:29.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中缀表达式转后缀表达式并计算"><a href="#中缀表达式转后缀表达式并计算" class="headerlink" title="中缀表达式转后缀表达式并计算"></a>中缀表达式转后缀表达式并计算</h1><h2 id="思路-中缀转后缀"><a href="#思路-中缀转后缀" class="headerlink" title="思路(中缀转后缀)"></a>思路(中缀转后缀)</h2><ol><li>判断是否为操作符:<ol><li><strong>不是</strong>输出到输出栈</li><li><strong>是</strong>进入到判断操作符栈是否为空的操作</li></ol></li><li>判断是否操作符栈为空:<ol><li><strong>空</strong>直接加入到字符栈</li><li><strong>不空</strong>判断入栈元素</li></ol></li><li>如果入栈元素优先级大于栈顶优先级直接入栈( <strong>不包括 ‘(’  ‘)’</strong> )</li><li>如果入栈元素优先级小于或等于栈顶优先级,将栈顶元素弹出到输出栈直到入栈元素优先级大于栈顶优先级</li><li>如果遇到 <strong>‘(’ ‘)’</strong>的情况<ol><li>如果入栈元素是 <strong>’(‘</strong>直接加入</li><li>如果栈顶元素是 <strong>’(‘</strong>直接加入</li><li>如果入栈元素是 <strong>’)‘</strong>将<strong>’(‘</strong>之前的元素都弹出到输出栈直到出现 <strong>’(‘</strong>,然后将 <strong>’(‘</strong>,和<strong>’)‘</strong>都舍弃</li></ol></li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Stack&lt; Character&gt; transFerToPostFix(ArrayList&lt;Character&gt; list)&#123;</span><br><span class="line">    Iterator&lt;Character&gt; iterator=list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        <span class="keyword">char</span> c=iterator.next();</span><br><span class="line">        <span class="comment">//判断是否为操作符</span></span><br><span class="line">        <span class="keyword">if</span> (isOperator(c))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!operStack.isEmpty())&#123;</span><br><span class="line">                <span class="comment">//如果入栈元素不是'）',且优先级大于栈顶的优先级</span></span><br><span class="line">                <span class="keyword">if</span> (priority(c) !=<span class="number">4</span> &amp;&amp; priority(c) &gt; priority(operStack.getTop()))&#123;</span><br><span class="line">                    operStack.push(c);</span><br><span class="line">                &#125;<span class="keyword">else</span>   <span class="comment">//压入元素不是')'并且优先级小于顶部元素</span></span><br><span class="line">                    <span class="keyword">if</span> (priority(c)!=<span class="number">4</span> &amp;&amp; priority(c)&lt;=priority(operStack.getTop()))&#123;</span><br><span class="line">                        <span class="comment">//如果压入元素的优先级小于顶部元素的优先级,并且操作符栈不为空,并且栈顶元素不是'('</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> (priority(c)&lt;priority(operStack.getTop()) &amp;&amp; !operStack.isEmpty() &amp;&amp; priority(operStack.getTop())!=priority(<span class="string">'('</span>))&#123;</span><br><span class="line">                            outStack.push(operStack.pop());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (priority(c)==priority(operStack.getTop()) &amp;&amp; !operStack.isEmpty())&#123;</span><br><span class="line">                            outStack.push(operStack.pop());</span><br><span class="line">                        &#125;</span><br><span class="line">                        operStack.push(c);</span><br><span class="line">                &#125;<span class="keyword">else</span>   <span class="comment">//如果操作符是')'将操作符弹出知道'(',并将左右括号舍去</span></span><br><span class="line">                    <span class="keyword">if</span> (priority(c)==<span class="number">4</span>)&#123;</span><br><span class="line">                        <span class="keyword">while</span> (priority(operStack.getTop())!=priority(<span class="string">'('</span>))&#123;</span><br><span class="line">                            outStack.push(operStack.pop());</span><br><span class="line">                            <span class="keyword">if</span> (operStack.isEmpty())&#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (!operStack.isEmpty())&#123;</span><br><span class="line">                            operStack.pop();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                operStack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果是数字直接加进输出栈中</span></span><br><span class="line">            outStack.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!operStack.isEmpty())&#123;</span><br><span class="line">        outStack.push(operStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> outStack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现过程中出现的问题"><a href="#实现过程中出现的问题" class="headerlink" title="实现过程中出现的问题"></a>实现过程中出现的问题</h2><ul><li>当出现栈顶元素优先级和入栈元素的优先级相同时<ul><li>解决办法:此时应该将栈顶优先级先弹出后压入要入栈的元素</li></ul></li></ul><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Stack&lt;Character&gt; outStack)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] chars=<span class="keyword">new</span> <span class="keyword">char</span>[outStack.size()];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!outStack.isEmpty())&#123;</span><br><span class="line">        chars[i]=outStack.pop();</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkedList&lt;String&gt; mList=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> s:chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOperator(s))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!mList.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">int</span> num1=Integer.parseInt(mList.pop());</span><br><span class="line">                <span class="keyword">int</span> num2=Integer.parseInt(mList.pop());</span><br><span class="line">                <span class="keyword">if</span> (priority(s)==priority(<span class="string">'/'</span>)&amp;&amp;num1==<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"除数不能为0"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> newNum=cal(num2,num1,s);</span><br><span class="line">                mList.push( String.valueOf(newNum));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//数字则压入栈中</span></span><br><span class="line">            mList.push(s+<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mList.isEmpty())&#123;</span><br><span class="line">        System.out.println(<span class="string">"result: "</span>+mList.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路-计算"><a href="#思路-计算" class="headerlink" title="思路(计算)"></a>思路(计算)</h2><ol><li>首先将栈反转</li><li>然后依次出栈如果是操作数直接将操作数加入,如果是操作符将操作符和它的后两个操作数加入</li><li>计算并将结果入栈</li><li>重复2</li><li>直到计算完成没有操作符</li></ol><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><p>将操作符和它的后两个元素加入</p><h2 id="辅助的方法"><a href="#辅助的方法" class="headerlink" title="辅助的方法"></a>辅助的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num1 操作数1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num2 操作数2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> operator 操作符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 运算结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2,<span class="keyword">char</span> operator)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (operator)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:<span class="keyword">return</span> num1+num2;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:<span class="keyword">return</span> num1-num2;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:<span class="keyword">return</span> num1*num2;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:<span class="keyword">return</span> num1/num2;</span><br><span class="line">        <span class="keyword">default</span> :<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c 操作符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 判断是否是操作符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c==<span class="string">'+'</span> || c==<span class="string">'-'</span> || c==<span class="string">'*'</span> || c==<span class="string">'/'</span> || c==<span class="string">'('</span> || c==<span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c 操作符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 判断优先级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pcd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostFix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * operStack是操作符栈</span></span><br><span class="line"><span class="comment">     * outStack是最终的输出栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Stack&lt;Character&gt; operStack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Stack&lt;Character&gt; outStack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入表达式:  "</span>);</span><br><span class="line">        <span class="keyword">char</span>[] expression=scanner.nextLine().toCharArray();</span><br><span class="line">        ArrayList&lt;Character&gt; express=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> s: expression) &#123;</span><br><span class="line">            express.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       Stack&lt;Character&gt; newStack=transFerToPostFix(express);</span><br><span class="line">        newStack.printAll();</span><br><span class="line">        newStack.reverse().printAll();</span><br><span class="line">        calculate(newStack.reverse());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt; Character&gt; transFerToPostFix(ArrayList&lt;Character&gt; list)&#123;</span><br><span class="line">        Iterator&lt;Character&gt; iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="keyword">char</span> c=iterator.next();</span><br><span class="line">            <span class="comment">//判断是否为操作符</span></span><br><span class="line">            <span class="keyword">if</span> (isOperator(c))&#123;</span><br><span class="line">                <span class="keyword">if</span> (!operStack.isEmpty())&#123;</span><br><span class="line">                    <span class="comment">//如果入栈元素不是'）',且优先级大于栈顶的优先级</span></span><br><span class="line">                    <span class="keyword">if</span> (priority(c) !=<span class="number">4</span> &amp;&amp; priority(c) &gt; priority(operStack.getTop()))&#123;</span><br><span class="line">                        operStack.push(c);</span><br><span class="line">                    &#125;<span class="keyword">else</span>   <span class="comment">//压入元素不是')'并且优先级小于顶部元素</span></span><br><span class="line">                        <span class="keyword">if</span> (priority(c)!=<span class="number">4</span> &amp;&amp; priority(c)&lt;=priority(operStack.getTop()))&#123;</span><br><span class="line">                            <span class="comment">//如果压入元素的优先级小于顶部元素的优先级,并且操作符栈不为空,并且栈顶元素不是'('</span></span><br><span class="line"></span><br><span class="line">                            <span class="keyword">while</span> (priority(c)&lt;priority(operStack.getTop()) &amp;&amp; !operStack.isEmpty() &amp;&amp; priority(operStack.getTop())!=priority(<span class="string">'('</span>))&#123;</span><br><span class="line">                                outStack.push(operStack.pop());</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (priority(c)==priority(operStack.getTop()) &amp;&amp; !operStack.isEmpty())&#123;</span><br><span class="line">                                outStack.push(operStack.pop());</span><br><span class="line">                            &#125;</span><br><span class="line">                            operStack.push(c);</span><br><span class="line">                    &#125;<span class="keyword">else</span>   <span class="comment">//如果操作符是')'将操作符弹出知道'(',并将左右括号舍去</span></span><br><span class="line">                        <span class="keyword">if</span> (priority(c)==<span class="number">4</span>)&#123;</span><br><span class="line">                            <span class="keyword">while</span> (priority(operStack.getTop())!=priority(<span class="string">'('</span>))&#123;</span><br><span class="line">                                outStack.push(operStack.pop());</span><br><span class="line">                                <span class="keyword">if</span> (operStack.isEmpty())&#123;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!operStack.isEmpty())&#123;</span><br><span class="line">                                operStack.pop();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    operStack.push(c);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果是数字直接加进输出栈中</span></span><br><span class="line">                outStack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!operStack.isEmpty())&#123;</span><br><span class="line">            outStack.push(operStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> outStack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(Stack&lt;Character&gt; outStack)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars=<span class="keyword">new</span> <span class="keyword">char</span>[outStack.size()];</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!outStack.isEmpty())&#123;</span><br><span class="line">            chars[i]=outStack.pop();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;String&gt; mList=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> s:chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isOperator(s))&#123;</span><br><span class="line">                <span class="keyword">if</span> (!mList.isEmpty())&#123;</span><br><span class="line">                    <span class="keyword">int</span> num1=Integer.parseInt(mList.pop());</span><br><span class="line">                    <span class="keyword">int</span> num2=Integer.parseInt(mList.pop());</span><br><span class="line">                    <span class="keyword">if</span> (priority(s)==priority(<span class="string">'/'</span>)&amp;&amp;num1==<span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"除数不能为0"</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">int</span> newNum=cal(num2,num1,s);</span><br><span class="line">                    mList.push( String.valueOf(newNum));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//数字则压入栈中</span></span><br><span class="line">                mList.push(s+<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mList.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"result: "</span>+mList.pop());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1 操作数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2 操作数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operator 操作符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 运算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2,<span class="keyword">char</span> operator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operator)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:<span class="keyword">return</span> num1+num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:<span class="keyword">return</span> num1-num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:<span class="keyword">return</span> num1*num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:<span class="keyword">return</span> num1/num2;</span><br><span class="line">            <span class="keyword">default</span> :<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c 操作符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 判断是否是操作符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c==<span class="string">'+'</span> || c==<span class="string">'-'</span> || c==<span class="string">'*'</span> || c==<span class="string">'/'</span> || c==<span class="string">'('</span> || c==<span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c 操作符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 判断优先级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (c)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="需要用到的栈的代码"><a href="#需要用到的栈的代码" class="headerlink" title="需要用到的栈的代码"></a>需要用到的栈的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pcd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际的栈的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ArrayList来存储元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 数据元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T element)</span></span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        list.add(element);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实际长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        T t=list.get(size-<span class="number">1</span>);</span><br><span class="line">        list.remove(size-<span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            list.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getTop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span> &amp;&amp; size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            T temp = list.get(size - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (size==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.print(list.get(i)+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将栈逆序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stack&lt;T&gt; <span class="title">reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Stack&lt;T&gt; newStack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">           newStack.push(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newStack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;中缀表达式转后缀表达式并计算&quot;&gt;&lt;a href=&quot;#中缀表达式转后缀表达式并计算&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转后缀表达式并计算&quot;&gt;&lt;/a&gt;中缀表达式转后缀表达式并计算&lt;/h1&gt;&lt;h2 id=&quot;思路-中缀转后缀&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库--Mysql</title>
    <link href="http://yoursite.com/2020/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93--Mysql/"/>
    <id>http://yoursite.com/2020/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93--Mysql/</id>
    <published>2020-07-23T04:12:57.000Z</published>
    <updated>2020-09-12T03:15:09.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库–Mysql"><a href="#数据库–Mysql" class="headerlink" title="数据库–Mysql"></a>数据库–Mysql</h1><h2 id="mysql数据库介绍"><a href="#mysql数据库介绍" class="headerlink" title="mysql数据库介绍"></a>mysql数据库介绍</h2><h3 id="什么是MySQL数据库："><a href="#什么是MySQL数据库：" class="headerlink" title="什么是MySQL数据库："></a>什么是MySQL数据库：</h3><p>1:    mysql数据库是一种开放源代码的关系型数据库管理系统(RDBMS),使用最常用的数据库管理语言–<strong>结构化查询语言(SQL)</strong>进行数据库管理。</p><p>2:    mysql数据库开放源代码的,因此任何人都</p><p>可以在General Public License的许可下下载并根据个性化的需要对其进行修改。</p><p>3:    mysql因为其速度,可靠性和适应性而备受关注。大多数人都认为在不需要<strong>事务化处理</strong>的情况下,mysql是管理内容最好的数据库.</p><h2 id="对SQL语句分类"><a href="#对SQL语句分类" class="headerlink" title="对SQL语句分类"></a>对SQL语句分类</h2><h3 id="1-数据库定义语言-DDL-Data-Defination-Language"><a href="#1-数据库定义语言-DDL-Data-Defination-Language" class="headerlink" title="1.数据库定义语言-DDL(Data Defination Language):"></a>1.数据库定义语言-DDL(Data Defination Language):</h3><p>用于创建和定义数据库对象,并且将对这些对象的定义保存到数据库字典中等一系列对数据库对象的操作.</p><ol><li>CREATE – 创建</li><li>DROP – 删除</li><li>ALTER – 修改</li><li>RENAME – 修改表名</li><li>TRUNCATE – 删除表中数据</li><li>DESC – 查询表中的字段</li><li>SHOW – 查询该数据库信息</li></ol><h3 id="2-数据库控制语言-DCL-Data-Control-Language"><a href="#2-数据库控制语言-DCL-Data-Control-Language" class="headerlink" title="2.数据库控制语言-DCL(Data Control Language):"></a>2.数据库控制语言-DCL(Data Control Language):</h3><p>用于修改数据库中的权限</p><ol><li>GRANT –</li><li>REVOKE –</li></ol><h3 id="3-数据库操纵语言-DML-DML-Manipulation-Language"><a href="#3-数据库操纵语言-DML-DML-Manipulation-Language" class="headerlink" title="3.数据库操纵语言-DML(DML Manipulation Language):"></a>3.数据库操纵语言-DML(DML Manipulation Language):</h3><p>主要是对逻辑结构等的操作,包括表结构,视图和索引</p><ol><li>SELECT – 查询</li><li>INSERT –插入</li><li>UPDATE –更改</li><li>DELETE –删除</li><li>CALL – 调用存储过程</li><li>MERGE –</li><li>COMMIT –提交事务</li><li>ROLLBACK – 回滚事务</li><li>START TRANSACTION – 开启事务</li></ol><h3 id="4-实现数据库中的基本操作"><a href="#4-实现数据库中的基本操作" class="headerlink" title="4.实现数据库中的基本操作:"></a>4.实现数据库中的基本操作:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">start</span> mysql80 <span class="comment">#启动mysql服务</span></span><br><span class="line">mysql -u root -p <span class="comment">#连接数据库</span></span><br></pre></td></tr></table></figure> <img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200608235052939.png" alt="image-20200608235052939" style="zoom:50%;" /><h4 id="DDL的操作"><a href="#DDL的操作" class="headerlink" title="DDL的操作:"></a>DDL的操作:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database test_1 character set utf8MB4;  #创建数据库 test_1</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200608235402348.png" alt="image-20200608235402348" style="zoom: 80%;" /><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database test_1;#删除数据库  test_1</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200608235636336.png" alt="image-20200608235636336" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;#查询mysql服务器下的所有数据库</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609000021202.png" alt="image-20200609000021202" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database test_1;#查看某一个数据库的详细信息</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609000501264.png" alt="image-20200609000501264" style="zoom: 80%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use test_1;#使连接并使用test_1数据库</span><br><span class="line">select database();#查询现在用户连接的是哪个数据库</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609000703300.png" alt="image-20200609000703300"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database test_1 character set utf8MB4#改变库的编码</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609001117190.png" alt="image-20200609001117190" style="zoom:80%;" /><h4 id="DCL操作"><a href="#DCL操作" class="headerlink" title="DCL操作:"></a>DCL操作:</h4><h4 id="DML操作"><a href="#DML操作" class="headerlink" title="DML操作:"></a>DML操作:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#创建表</span><br><span class="line">create table test_table_1(</span><br><span class="line">S_ID int auto_increment primary key comment &#39;序列号&#39;,</span><br><span class="line">    S_NAME varchar(40) not null unique comment &#39;学生姓名&#39;,</span><br><span class="line">    S_NUMBER bigint(20) not null unique comment &#39;学号&#39;,</span><br><span class="line">    S_MATH FLOAT COMMENT &#39;数学成绩&#39;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609004324106.png" alt="image-20200609004324106" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drop table test_table_1;#删除表 drop table 表名</span><br><span class="line">desc test_table_1;#查询表中的字段信息</span><br><span class="line">show create table test_table_1;#打印一张表的创建信息</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#对表名和表中字段进行的操作</span><br><span class="line">#修改表名</span><br><span class="line">rename table test_table_1 to test_table_2;</span><br><span class="line">#添加字段</span><br><span class="line">alter table test_table_2 add S_CHINESE float;</span><br><span class="line">#删除字段</span><br><span class="line">alter table test_table_2 drop S_CHINESE;</span><br><span class="line">#对字段进行重命名</span><br><span class="line">alter table test_table_2 change S_ID id int;</span><br><span class="line">#对字段的数据类型进行修改</span><br><span class="line">alter table test_table_2 change S_MATH S_MATH int;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#插入数据</span><br><span class="line"></span><br><span class="line">#第一种插入:当有括号写字段名是可以以随意设置插入的字段值</span><br><span class="line">insert into test_table_1(S_NAME,S_NUMBER,S_MATH) values(&#39;裴一一&#39;,&#39;1913040433&#39;,&#39;90&#39;);</span><br><span class="line">insert into test_table_1(S_ID,S_NAME,S_NUMBER,S_MATH) values(&#39;2&#39;,&#39;裴晨栋&#39;,&#39;1913040432&#39;,&#39;80&#39;);</span><br><span class="line">#第二种插入:set来确定数据</span><br><span class="line">    insert into test_table_1 set S_NAME&#x3D;&#39;裴一发儿&#39;,S_NUMBER&#x3D;&#39;1913040434&#39;,S_MATH&#x3D;&#39;100&#39;;</span><br><span class="line">#第三种插入:连续插入多条数据</span><br><span class="line">insert into test_table_1(S_NAME,S_NUMBER,S_MATH) values(&#39;裴一二&#39;,&#39;1913040435&#39;,&#39;110&#39;),(&#39;裴一三&#39;,&#39;1913040436&#39;,&#39;120&#39;),(&#39;裴一四&#39;,&#39;1913040437&#39;,&#39;120&#39;);</span><br><span class="line">#当表名后不带字段值是必须添加完成的字段数据</span><br><span class="line">insert into user value (null,&#39;张三&#39;,&#39;123&#39;);</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609005816157.png" alt="image-20200609005816157" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#更改操作</span><br><span class="line">update test_table_1 set S_NUMBER&#x3D;&#39;1913040438&#39; WHERE S_ID&#x3D;&#39;6&#39;;#更改</span><br><span class="line">update test_table_1 set S_NUMBER&#x3D;&#39;1913040437&#39; WHERE S_ID&#x3D;&#39;6&#39;;#改回</span><br></pre></td></tr></table></figure><p>更改前:</p><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609010411691.png" alt="image-20200609010411691" style="zoom:80%;" /><p>更改后:</p><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609010517045.png" alt="image-20200609010517045" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除操作</span><br><span class="line">delete from test_table_1  where S_ID&#x3D;&#39;6&#39;;</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609011220900.png" alt="image-20200609011220900" style="zoom:80%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查找</span><br><span class="line">select * from test_table_1;</span><br><span class="line">select S_ID,S_NAME,S_NUMBER FROM test_Table_1;</span><br><span class="line">select S_NUMBER as 学号 FROM test_table_1 where S_NAME&#x3D;&#39;裴晨栋&#39;;</span><br></pre></td></tr></table></figure><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200609011858705.png" alt="image-20200609011858705" style="zoom:80%;" /><p>其余的DML操作会在后面展示;</p><h2 id="对数据库进行备份与还原"><a href="#对数据库进行备份与还原" class="headerlink" title="对数据库进行备份与还原"></a>对数据库进行备份与还原</h2><h3 id="1-数据库备份"><a href="#1-数据库备份" class="headerlink" title="1.数据库备份"></a>1.数据库备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#数据库备份-格式：mysqldump -h主机名  -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql</span><br><span class="line">mysqldump -uroot -p test_1&gt;C:\test_1_back.sql</span><br><span class="line">#备份数据库中的指定表 若为空则备份整个数据库</span><br><span class="line">mysqldump -uroot -p test_1 test_table_1 test_table_2 &gt;C:\test_1_back.sql</span><br><span class="line">#同时备份多个数据库</span><br><span class="line">mysqldump -uroot -p --databases test_1 04_mysql&gt;test_1_back.sql</span><br><span class="line">#同时备份所有数据库</span><br><span class="line">mysqldump –all-databases &gt; test_1_back.sql</span><br></pre></td></tr></table></figure><h3 id="2-数据库还原"><a href="#2-数据库还原" class="headerlink" title="2.数据库还原"></a>2.数据库还原</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#还原备份的文本数据:首先进入到mysql环境--&gt;创建一个数据库--&gt;在库下还原数据--&gt;source 备份的数据库脚本</span><br><span class="line">create database test_1_back;</span><br><span class="line">#第一种需要在某一数据库下使用</span><br><span class="line">source C:\test_1_back.sql;</span><br><span class="line">#第二种在全局使用 mysqldump -h主机名  -P端口 -u用户名 -p密码 –database 数据库名 &lt; 文件名.sql</span><br><span class="line">mysql -uroot -p test_1_back &lt; C:\test_1_back.sql;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>​            处理一组信息的操作集合构成一个事务</p></blockquote><h3 id="事务的四个条件"><a href="#事务的四个条件" class="headerlink" title="事务的四个条件"></a>事务的四个条件</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a><strong>原子性</strong></h4><blockquote><p>​                一个事务中的所有操作,要么全部完成不会结束在中间某个环节.事务在执行过程中出现错误,会被回滚到事务开始前的状态,就像这个事务从来没有执行过一样.</p></blockquote><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><blockquote><p>在事务开始和结束以后,数据库的完整性没有被破坏.</p></blockquote><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a><strong>隔离性</strong></h4><blockquote><p>数据库允许多个并发事务同时对其数据进行读写和修改能力,隔离可以防止多个事务并发执行时由于交叉执行而导致数据的不一致.事务隔离分为不同级别,包括:读未提交(Read uncommitted) ,读提交(read committed) ,可重复读(repeatable read) 和串行化(Serializable);</p></blockquote><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性:"></a><strong>持久性:</strong></h4><blockquote><p>事务处理结束后,对数据的修改是永久的,几遍系统故障也不会丢失.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#开启事务</span><br><span class="line">start transaction</span><br><span class="line">#回滚事务</span><br><span class="line">rollback</span><br><span class="line">#提交事务</span><br><span class="line">commit</span><br><span class="line">#查询mysql软件的事务的隔离界别</span><br><span class="line">slelct @@transaction_isolation</span><br><span class="line">#设置mysql软件默认的隔离级别</span><br><span class="line">set global transaction isolation 事务级别名</span><br></pre></td></tr></table></figure><table><thead><tr><th>事务隔离级别</th><th align="left">脏读</th><th>不可重复/</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交(read uncommitted)</td><td align="left">是</td><td>是</td><td>是</td></tr><tr><td>不可重复读(read commited)</td><td align="left">否</td><td>是</td><td>是</td></tr><tr><td>可重复读(repeatable read)</td><td align="left">否</td><td>否</td><td>是</td></tr><tr><td>串行化(serializable)</td><td align="left">否</td><td>否</td><td>否</td></tr></tbody></table><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><blockquote><p>事务中的修改,即使没有提交,对其它事务也是都可见的,事务可以读取未提交的数据,这也被称为脏读.</p></blockquote><table><thead><tr><th>时间</th><th>客户端A</th><th>客户端B</th></tr></thead><tbody><tr><td>T1</td><td>设置事务的隔离级别为read uncomitted</td><td>设置事务隔离级别为read uncommited</td></tr><tr><td>T2</td><td>开始事务A     start transaction</td><td></td></tr><tr><td>T3</td><td>裴 一 一数学成绩提高10分 update test_table_2 set S_MATH=S_MATH+10;</td><td></td></tr><tr><td>T4</td><td></td><td>开始事务</td></tr><tr><td>T5</td><td></td><td>select * from test_table_2 where id=1</td></tr><tr><td>T6</td><td></td><td>提交事务 commit</td></tr><tr><td>T7</td><td>回滚 rollback</td><td></td></tr><tr><td>T8</td><td>select * from test_table_2 where id=1</td><td></td></tr><tr><td>T9</td><td>提交事务 commit</td><td></td></tr></tbody></table><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><blockquote><p>一个事务从开始到结束所做的任何修改在任何时候都是不可见的,只有结束后才能被其它事务看到,但有时执行</p><p>同样的查询是会得到不同的结果.</p></blockquote><p>​        </p><table><thead><tr><th>时间</th><th>客户端A</th><th>客户端B</th></tr></thead><tbody><tr><td>T1</td><td>设置事务隔离级别为read commited</td><td>设置事务隔离级别read commited</td></tr><tr><td>T2</td><td>开始事务A</td><td></td></tr><tr><td>T3</td><td>查询id=1的信息</td><td></td></tr><tr><td>T4</td><td></td><td>开始事务</td></tr><tr><td>T5</td><td></td><td>id=1的学生的成绩加10</td></tr><tr><td>T6</td><td></td><td>事务B提交</td></tr><tr><td>T7</td><td>查询id=1的信息</td><td></td></tr><tr><td>T8</td><td>事务A提交</td><td></td></tr></tbody></table><p>​    两次查询结果不一,第一次查询为90第二次查询为100,但都是在一个事务内,因为有B事务更改id=1的学生的数学成绩此时A事务可以查询到数据更改.说明不可重复读可以查询别的事务已经提交的和本事务相同对象的的结果.</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><blockquote><p>当某一事务在读取某个范围内的记录时,另一个事务又在该范围内插入了新的记录,当之前的书屋再次读取该范围的记录时,会产生幻行.InnoDB存储引擎通过多版本控制并发控制(MVCC)解决了幻读问题</p></blockquote><table><thead><tr><th>时间</th><th>客户端A</th><th>客户端B</th></tr></thead><tbody><tr><td>T1</td><td>设置事务隔离界别为repeatable read</td><td>设置事务隔离界别为repeatable read</td></tr><tr><td>T2</td><td>开始事务A</td><td></td></tr><tr><td>T3</td><td></td><td>开始事务B</td></tr><tr><td>T4</td><td></td><td>插入一个新的信息</td></tr><tr><td>T5</td><td></td><td>事务B提交</td></tr><tr><td>T6</td><td>查询表并未新插入的信息</td><td></td></tr><tr><td>T7</td><td>插入一行和B插入的同样的信息</td><td></td></tr><tr><td>T8</td><td>出现报错</td><td></td></tr></tbody></table><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数和浮点数"><a href="#整数和浮点数" class="headerlink" title="整数和浮点数"></a>整数和浮点数</h3><table><thead><tr><th>类型</th><th>大小</th><th>范围(有符号)</th><th>范围(无符号)</th><th>用途</th></tr></thead><tbody><tr><td>tinint</td><td>1 byte</td><td>(-128,127)</td><td>(0，255)</td><td>小整数</td></tr><tr><td>smallint</td><td>2 bytes</td><td>(-32768,32767)</td><td>(0，65 535)</td><td>大整数</td></tr><tr><td>mediumint</td><td>3 bytes</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数</td></tr><tr><td>int或integer</td><td>4 bytes</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td><td>大整数</td></tr><tr><td>bigint</td><td>8 bytes</td><td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数</td></tr><tr><td>float</td><td>4 bytes</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>(0，1.175 494 351 E-38，3.402 823 466 E+38)</td><td>单精度浮点数</td></tr><tr><td>double</td><td>8 bytes</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度浮点数</td></tr></tbody></table><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200611215433933.png" alt="image-20200611215433933" style="zoom:80%;" /><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200611215520525.png" alt="image-20200611215520525" style="zoom:80%;" /><p><img src="C:%5CUsers%5Cpeichendong%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200611215949949.png" alt="image-20200611215949949"></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#在mysql中使用函数使用select 关键字调用:select 函数名(字段) from 表名</span><br><span class="line">#找出最大值</span><br><span class="line">SELECT MAX(字段) AS 最大值 FROM 表名</span><br><span class="line">#找出最小值</span><br><span class="line">SELECT MIN(字段) AS 最低值 FROM 表名</span><br><span class="line">#求平均数</span><br><span class="line">SELECT AVG(字段) AS 平均值 FROM 表名</span><br><span class="line">#求和</span><br><span class="line">SELECT SUM(字段) AS 总值 FROM 表名</span><br><span class="line">#统计记录: 如果字段的值为U&#x3D;NULL则此字段对应的数据条数不在统计之内.</span><br><span class="line">#为解决上述问题:在统计某一张表中的所有数据记录是最好使用</span><br><span class="line">COUNT(*);</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#获取当前系统时间,时间格式包括时分秒</span><br><span class="line">SELECT NOW() AS 当前系统时间</span><br><span class="line">#获取当前的时分秒</span><br><span class="line">SELECT CURTIME();</span><br><span class="line">#获取当前的年月日</span><br><span class="line">SELECT CURDATE();</span><br><span class="line"></span><br><span class="line">#向上取舍</span><br><span class="line">SELECT CEIL(2.3)</span><br><span class="line">#得3</span><br><span class="line">#向下取舍</span><br><span class="line">SELECT RAND(2.3)</span><br><span class="line">#得2</span><br><span class="line"></span><br><span class="line">#随机数 不用接受参数,返回0-1之间的小数</span><br><span class="line">SELECT RAND();</span><br><span class="line">#时间格式函数 时间格式可以修改</span><br><span class="line">DATE_FORMAT(时间字段名,&#39;%Y&#x2F;%m&#x2F;%d&#x2F; %H:%i:%s&#39;) AS 时间字段别名</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="升序降序"><a href="#升序降序" class="headerlink" title="升序降序"></a>升序降序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE bank;</span><br><span class="line">#降序(DESC)</span><br><span class="line">SELECT * FROM test_table_1 ORDER BY S_NUMBER DESC;</span><br><span class="line">#升序(ASC)</span><br><span class="line">SELECT * FROM test_table_1 ORDER BY S_NUMBER ASC;</span><br></pre></td></tr></table></figure><h3 id="同时查询多条语句"><a href="#同时查询多条语句" class="headerlink" title="同时查询多条语句"></a>同时查询多条语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select S_NAME where S_ID&#x3D;1 or S_ID&#x3D;2 or S_ID&#x3D;3;</span><br><span class="line">select S_NAME where S_ID in(1,2,3);</span><br><span class="line">select S_NAME WHERE S_ID NOT IN(1,2,3);</span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查询数学成绩中各种出现的分数</span><br><span class="line">select S_MATH from test_table_1 group by S_MATH;</span><br><span class="line">#查询数学成绩中是否有150分</span><br><span class="line">select S_MATH from test_table_1 where S_MATH&#x3D;150;</span><br><span class="line">#查询数学成绩中是否有150分,通过group by 查询</span><br><span class="line">select S_MATH from test_table_1 group by S_MATH having S_MATH&#x3D;150;</span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#在test_table_1表中有7条数据记录 每页显示3条</span><br><span class="line">SELECT * FROM test_table_1 LIMIT 0,3;</span><br><span class="line">#获取第二页数据</span><br><span class="line">SELECT * FROM test_table_1 LIMIT 3,3; </span><br><span class="line">#获取第三页的数据</span><br><span class="line">SELECT * FROM test_table_1 LIMIT 6,3;</span><br></pre></td></tr></table></figure><h3 id="分表查询"><a href="#分表查询" class="headerlink" title="分表查询"></a>分表查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select * from 表1，表2，表3...表n where 条件</span><br><span class="line"></span><br><span class="line">seelt 字段名1,字段名2,字段名3,字段名4 from 表1,表2,表3 where 条件</span><br><span class="line"></span><br><span class="line"># union union all:可以将两个查询语句的结果进行合并,合并的前提是两个查询语句的数据结构是一样的</span><br><span class="line">#union可以自动去重</span><br><span class="line">#union all 不能够去重</span><br></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查询test_table_1表中以裴子开头的所有名字</span><br><span class="line">select * from test_table_1 where S_NAME LIKE &#39;裴%&#39;</span><br><span class="line">#查询test_table_1表中以一为名字中间部分的名字</span><br><span class="line">select * from test_table_1 where S_NAME like &#39;%一%&#39;</span><br><span class="line">#查询test_table_1表中以儿结尾的名字</span><br><span class="line">select * from test_table_1 where S_NAME like &#39;%儿&#39;</span><br></pre></td></tr></table></figure><h3 id="内外连接"><a href="#内外连接" class="headerlink" title="内外连接"></a>内外连接</h3><blockquote><p>内连接</p><p>关键字：inner join on</p><p>语句：select * from a_table a inner join b_table bon a.a_id = b.b_id;</p><p>说明：组合两个表中的记录，返回关联字段相符的记录，也就是返回两个表的交集（阴影）部分。</p></blockquote><blockquote><p>外连接</p><p>关键字：left join on / left outer join on</p><p>语句：select * from a_table a left join b_table bon a.a_id = b.b_id;</p><p>left join 是left outer join的简写，它的全称是左外连接，是外连接中的一种。</p><p>左(外)连接，左表(a_table)的记录将会全部表示出来，而右表(b_table)只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。</p></blockquote><blockquote><p>​        右连接</p><p>关键字：right join on / right outer join on</p><p>语句：select * from a_table a right outer join b_table b on a.a_id = b.b_id;</p><p>说明：</p><p>right join是right outer join的简写，它的全称是右外连接，是外连接中的一种。</p><p>与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL。</p></blockquote><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p>在真实表中构建的一个虚表</p></blockquote><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create view view_all </span><br><span class="line">as select t.S_ID,t.S_NAME,t.S_NUMBER,t.S_MATH</span><br><span class="line">from test_table_1 t</span><br><span class="line">WHERE t.S_ID in(1,2,3);</span><br><span class="line">#对视图的增删改查与对表的增删改查一模一样</span><br></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#存储过程的语法:</span><br><span class="line"></span><br><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line">CREATE PROCEDURE 存储过程名(参数名1参数类型1,参数名2,参数类型2)</span><br><span class="line">BEGIN</span><br><span class="line">代码块;</span><br><span class="line">END&#x2F;&#x2F;</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line">CREATE PROCEDURE 存储过程名(IN 输入参数名 参数类型,OUT 输出参数名 参数类型)</span><br><span class="line">BEGIN</span><br><span class="line">代码块;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line">#调用存储过程: call 存储过程名()</span><br><span class="line"></span><br><span class="line">#几种循环结构</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_41453285&#x2F;article&#x2F;details&#x2F;90180268</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库–Mysql&quot;&gt;&lt;a href=&quot;#数据库–Mysql&quot; class=&quot;headerlink&quot; title=&quot;数据库–Mysql&quot;&gt;&lt;/a&gt;数据库–Mysql&lt;/h1&gt;&lt;h2 id=&quot;mysql数据库介绍&quot;&gt;&lt;a href=&quot;#mysql数据库介绍&quot; cla
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>暑期考核算法题-2</title>
    <link href="http://yoursite.com/2020/07/15/%E6%9A%91%E6%9C%9F%E8%80%83%E6%A0%B8%E7%AE%97%E6%B3%95%E9%A2%98-2/"/>
    <id>http://yoursite.com/2020/07/15/%E6%9A%91%E6%9C%9F%E8%80%83%E6%A0%B8%E7%AE%97%E6%B3%95%E9%A2%98-2/</id>
    <published>2020-07-15T02:41:23.000Z</published>
    <updated>2020-09-12T03:15:09.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暑期考核算法题-2"><a href="#暑期考核算法题-2" class="headerlink" title="暑期考核算法题-2"></a>暑期考核算法题-2</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h2><blockquote><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p></blockquote><h2 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h2><p>​                                                                            <a href="https://leetcode-cn.com/problems/group-anagrams" target="_blank" rel="noopener">题目</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="string">"eat"</span>, <span class="string">"tea"</span>, <span class="string">"tan"</span>, <span class="string">"ate"</span>, <span class="string">"nat"</span>, <span class="string">"bat"</span>]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="string">"ate"</span>,<span class="string">"eat"</span>,<span class="string">"tea"</span>],</span><br><span class="line">  [<span class="string">"nat"</span>,<span class="string">"tan"</span>],</span><br><span class="line">  [<span class="string">"bat"</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/group-anagrams</span></span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h2><blockquote><p>1.定义一个Map集合-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,List&lt;String&gt;&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>2.key存排序后的字符串,value存与key排序后相同的字符串集合</p><p>3.从第一个字符串开始,每次先排序后判断key里面是否包含,如果包含将原字符串添加到value的List<String>集合中,如果没有创建一个List<String>并将新创建的List<String>集合和此时key里没有的字符串加入到Map集合中-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">map.put(s,list1);</span><br><span class="line">list1.add(strs[i]);</span><br></pre></td></tr></table></figure><p>4.重复第三步,直至所有都加入到Map集合中</p><p>5.将Map集合中的value集合加入到result集合中-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;String&gt;&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> ( List&lt;String&gt; list:map.values()) &#123;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="算法源代码"><a href="#算法源代码" class="headerlink" title="算法源代码"></a>算法源代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peichendong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] strings=&#123;<span class="string">"eat"</span>,<span class="string">"tea"</span>,<span class="string">"tan"</span>,<span class="string">"ate"</span>,<span class="string">"nat"</span>,<span class="string">"bat"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        result=<span class="keyword">new</span> Test02().groupAnagrams(strings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; list:result) &#123;</span><br><span class="line">            System.out.println(list.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,List&lt;String&gt;&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars=strs[i].toCharArray();</span><br><span class="line">            Arrays.sort(chars);</span><br><span class="line">            String s=String.valueOf(chars);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s))&#123;</span><br><span class="line">                List&lt;String&gt; list=map.get(s);</span><br><span class="line">                list.add(strs[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;String&gt; list1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                map.put(s,list1);</span><br><span class="line">                list1.add(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( List&lt;String&gt; list:map.values()) &#123;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;暑期考核算法题-2&quot;&gt;&lt;a href=&quot;#暑期考核算法题-2&quot; class=&quot;headerlink&quot; title=&quot;暑期考核算法题-2&quot;&gt;&lt;/a&gt;暑期考核算法题-2&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="算法" scheme="http://yoursite.com/categories/java/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>暑期考核算法题-1</title>
    <link href="http://yoursite.com/2020/07/14/%E6%9A%91%E6%9C%9F%E8%80%83%E6%A0%B8%E7%AE%97%E6%B3%95%E9%A2%98-1/"/>
    <id>http://yoursite.com/2020/07/14/%E6%9A%91%E6%9C%9F%E8%80%83%E6%A0%B8%E7%AE%97%E6%B3%95%E9%A2%98-1/</id>
    <published>2020-07-14T02:05:44.000Z</published>
    <updated>2020-09-12T03:15:09.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暑期考核算法题-1"><a href="#暑期考核算法题-1" class="headerlink" title="暑期考核算法题-1"></a>暑期考核算法题-1</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h2><p>​                <a href="https://leetcode-cn.com/problems/missing-number/" target="_blank" rel="noopener">给定一个包含 <code>0, 1, 2, ..., n</code> 中 <em>n</em> 个数的序列，找出 0 .. <em>n</em> 中没有出现在序列中的那个数</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><p>​    首先:读题要找到0…n中没有出现在序列中的那个数,所以有三种情况.</p><ol><li><p>没有中间数。例如:3,0,1，没有2</p></li><li><p>没有n。例如:0,1，没有2</p></li><li><p>没有0。例如:1,2，没有0</p></li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h2><ol><li>排序</li><li>判断是否有n,没有输出n</li><li>判断是否有0,没有输出0</li><li>判断是否缺中间的某一个数,若缺返回该数</li><li>若不缺任何数,返回-1</li></ol><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现:"></a>Java实现:</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peichendong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] nums=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i]=scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="keyword">new</span> Test01().missingNumber(nums);</span><br><span class="line">        System.out.println(<span class="string">"缺失的数字是:"</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 将数组排序</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">if</span> (nums[nums.length-<span class="number">1</span>]!=nums.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i!=nums[i])&#123;</span><br><span class="line">               <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C语言实现"><a href="#C语言实现" class="headerlink" title="C语言实现"></a>C语言实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a[]=&#123;<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> num=missingNumber(a,<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> j;</span><br><span class="line">      <span class="keyword">int</span> temp=nums[i];</span><br><span class="line">      <span class="keyword">for</span> ( j = i<span class="number">-1</span>; j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;nums[j]; j--)</span><br><span class="line">      &#123;</span><br><span class="line">          nums[j+<span class="number">1</span>]=nums[j];</span><br><span class="line">      &#125;</span><br><span class="line">      nums[j+<span class="number">1</span>]=temp;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找</span></span><br><span class="line">    <span class="keyword">if</span> (nums[numsSize - <span class="number">1</span>] != numsSize)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> numsSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (i != nums[i])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;暑期考核算法题-1&quot;&gt;&lt;a href=&quot;#暑期考核算法题-1&quot; class=&quot;headerlink&quot; title=&quot;暑期考核算法题-1&quot;&gt;&lt;/a&gt;暑期考核算法题-1&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="c语言" scheme="http://yoursite.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JDBC学习</title>
    <link href="http://yoursite.com/2020/07/12/JDBC%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/07/12/JDBC%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-11T16:00:00.000Z</published>
    <updated>2020-09-12T03:15:09.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC学习"><a href="#JDBC学习" class="headerlink" title="JDBC学习"></a>JDBC学习</h1><h2 id="JDBC的基本概念"><a href="#JDBC的基本概念" class="headerlink" title="JDBC的基本概念"></a>JDBC的基本概念</h2><p>​        概念:Java DataBase Connectivity Java数据库连接,Java语言操作数据库</p><blockquote><p>​        JDBC本质:其实是官方定义的一套操作所有关系型数据库的规则,即接口.各个数据库厂商去实现这个接口,提供数据库驱动jar包.我们可以使用这套接口(JDBC)编程,真正执行的代码是驱动jar包中的实现类</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><ol><li><p>.导入驱动jar包</p><pre><code>1.复制C:\java\mysql-connector-java-8.0.20\mysql-connector-java-8.0.20.jar到项目的libs目录下 2.右键---&gt;Add As Library</code></pre></li><li><p>注册驱动</p></li><li><p>获取数据库连接对象</p></li><li><p>定义sql</p></li><li><p>获取执行sql语句的对象Statement</p></li><li><p>执行sql接收返回结果</p></li><li><p>处理结果</p></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入驱动jar包</span></span><br><span class="line">   <span class="comment">//2.注册驱动</span></span><br><span class="line">   Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">   <span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">   Connection connection =DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/04_mysql?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC"</span>,USER,PASS);</span><br><span class="line">   <span class="comment">//4.定义sql语句</span></span><br><span class="line">   String sql=<span class="string">"update bank set bankNo = 464861 where id = 1"</span>;</span><br><span class="line">   <span class="comment">//5.获取执行sql对象 Statement</span></span><br><span class="line">   Statement statement=connection.createStatement();</span><br><span class="line">   <span class="comment">//6.执行sql</span></span><br><span class="line">   <span class="keyword">int</span> count=statement.executeUpdate(sql);</span><br><span class="line">   <span class="comment">//处理结果</span></span><br><span class="line">   System.out.println(count);</span><br><span class="line">   <span class="comment">//释放资源</span></span><br><span class="line">   statement.close();</span><br><span class="line">   connection.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入jar包   </span></span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注册驱动,获取连接</span></span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//定义SQL</span></span><br><span class="line">            String sql=<span class="string">"select * from user where username=? and password=? "</span>;</span><br><span class="line">            <span class="comment">//获取执行对象</span></span><br><span class="line">             preparedStatement=connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//result指的是所求数据节点的上一个位置</span></span><br><span class="line">            <span class="comment">//给？赋值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,username);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            resultSet=preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> resultSet.next();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.close(resultSet,preparedStatement,connection);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h2><ul><li><p>DriverManger:驱动管理对象</p><blockquote><p>用于管理一组JDBC驱动服务的基本程序</p></blockquote><blockquote><ol><li><p>注册驱动:</p><p>​        static void registerDriver(Driver driver):注册于给定的驱动程序的DriverManger</p><p>​        写代码使用: Class.forName(“com.mysql.cj.jdbc.Driver”);</p><p>注意:mysql5之后的驱动jar包可以省略驱动注册驱动的步骤</p></li></ol></blockquote><blockquote><p>​    2.获取数据库连接:</p><p>​        方法:static Connection getConnection(String url,String user,String password)</p><p>​        参数:</p><p>​                *url:指定连接的路径:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*locahost:IP地址 3306:本机的端口号 test_demo:库名 useSSL:MySQL 8.0 以上版本不需要建立 SSL 连接的,需要显示关闭 allowPublicKeyRetrieval=true 允许客户端从服务器获取公钥。serverTimezone=UTC:指定时区(UTC代表的是全球标准时间)*/</span></span><br><span class="line"><span class="comment">//语法:jdbc:mysql:IP地址(域名):端口号/数据库名称?SSL设置关闭&amp;客户端获取公钥=设置指定时区</span></span><br><span class="line">jdbc:mysql:<span class="comment">//localhost:3306/test_demo?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</span></span><br></pre></td></tr></table></figure><p>​                *user:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名---&gt;root </span><br></pre></td></tr></table></figure><p>​                *password:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密码---&gt;password</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Connection:数据库连接对象</p><blockquote><p>功能:</p><p>​        1.获取执行sql的对象</p><p>​            *Statement createStatement();</p><p>​            *PreparedStatement prepareStatement(String url) 创建一个PrepareStatement对象,用于将参数sql语句发送至数据库</p><p>​         2.开启事务</p><p>​             *开启事务: void setAutoCommit(boolean autoCommit)  :调用该方法设置参数为false,即开启事务</p><p>​             *提交事务:commit();</p><p>​             *回滚事务:rollback();</p></blockquote></li><li><p>Statement:执行sql的对象</p><blockquote><p>1.执行sql</p><p>​            1.bolean execute(String url):可以执行任意的slq </p><p>​            2.int executeUpdate(String url): 执行DML(insert update delete)语句,DDL(create alter drop)语句</p><p>​                *返回值:影响的行数,可以通过影响的行数判断DML语句是否执行成功,返回值&gt;0则执行成功,否则则执行失败</p><p>​            3.ResuleSet executeQuery(String sql) 执行DML(select)语句</p></blockquote></li><li><p>ResultSet:</p><blockquote><p>结果集对象,封装查询的结果</p><p>next()：游标向下一行移动</p><p>getxxx(): 获取数据</p><p>​        xxx代表数据类型 如:int getInt()，String getString()</p><p>​        参数:int 代表列的编号 从1开始     如:getString(1)</p><p>​                String 代表列名称                 如:getString(“price”)</p></blockquote></li><li><p>ProparddStatement:执行sql的对象 </p></li></ul><h2 id="抽取JDBC工具类-JDBCUtils"><a href="#抽取JDBC工具类-JDBCUtils" class="headerlink" title="抽取JDBC工具类: JDBCUtils"></a>抽取JDBC工具类: JDBCUtils</h2><h3 id="目的-简化书写"><a href="#目的-简化书写" class="headerlink" title="目的:简化书写"></a>目的:简化书写</h3><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><ol><li><p>注册驱动也抽取</p></li><li><p>抽取一个方法获取连接对象</p><ol><li><p>需求:不想传递参数(麻烦),还得保证工具类的通用性</p></li><li><p>解决:配置文件</p><p>​    jdbc.properties</p><p>​    url=</p><p>​    user=</p><p>​    password=</p><p>​    Driver=</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/04_mysql?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</span></span><br><span class="line">user=root</span><br><span class="line">password=root</span><br><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>3.抽取一个方法释放资源</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现:"></a>实现:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.plaf.nimbus.State;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peichendong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 文件的读取,只需要读取一次即可拿到这些值,使用静态代码块</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取资源文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Properties集合类</span></span><br><span class="line">            Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader类加载器</span></span><br><span class="line">            ClassLoader classLoader=JdbcUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">            URL res=classLoader.getResource(<span class="string">"src/jdbc.properties"</span>);</span><br><span class="line">            String path=res.getPath();</span><br><span class="line">            properties.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            url=properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user=properties.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password=properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            String driver = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(driver);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h2><h3 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务"></a>1.事务</h3><blockquote><p>事务:一个包含多个步骤的业务操作,如果这个业务被事务管理,则这多个步骤要么同时成功,要么同时失败</p></blockquote><h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h3><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol><h3 id="3-使用connection对象来管理事务"><a href="#3-使用connection对象来管理事务" class="headerlink" title="3.使用connection对象来管理事务"></a>3.使用connection对象来管理事务</h3><ul><li>开启事务:setAutoCommit(boolean autoCommit):调用该方法设置参数为false,即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务:commit()<ul><li>当所有sql都执行之后提交事务</li></ul></li><li>回滚事务:rollback()<ul><li>在catch中回滚事务</li></ul></li></ul><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ol><li><p>概念:其实就是一个容器(集合),存放数据库连接的容器</p><ol><li>当系统初始化好后,容器被创建,当用户来访问数据库时,从容器中获取连接对象,用户访问完之后,将连接对象归还给容器。</li></ol></li><li><p>好处:</p><ol><li>节约资源</li><li>用户访问高效</li></ol></li><li><p>实现:</p><ol><li><p>标准接口:DataSource         java.sql包下</p><ol><li>方法:<ul><li>获取连接:getConnection()</li><li>归还连接:如果连接对象Connection是从连接池中获取的,那么调用Connection.close()方法,咋不会关闭连接,而是归还连接</li></ul></li></ol></li><li><p>一般我们不去实现它,有数据库厂商来实现</p><ol><li>C3P0:数据库连接技术</li><li>Druid:数据库连接池实现技术,由阿里巴巴提供的</li></ol></li><li></li></ol></li></ol><ol start="4"><li><ol><li><ul><li><ul><li></li></ul></li></ul></li></ol></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDBC学习&quot;&gt;&lt;a href=&quot;#JDBC学习&quot; class=&quot;headerlink&quot; title=&quot;JDBC学习&quot;&gt;&lt;/a&gt;JDBC学习&lt;/h1&gt;&lt;h2 id=&quot;JDBC的基本概念&quot;&gt;&lt;a href=&quot;#JDBC的基本概念&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
</feed>
